{"version":3,"sources":["lib/rootRSAOAEPKey.js","components/RootRSAOAEPKey.js","components/WebCryptoEncryption.js","lib/exportKeys.js","components/ExportKeys.js","lib/importKeys.js","components/ImportKeys.js","lib/encryptMessage.js","components/EncryptMessage.js","lib/utils.js","lib/decryptMessage.js","components/DecryptMessage.js","App.js","serviceWorker.js","index.js"],"names":["_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","stop","RootRSAOAEPKey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","event","_this2","preventDefault","_generateKey","apply","arguments","then","key","console","log","publicKey","privateKey","onGenerateKey","react_default","createElement","Fragment","RaisedButton_default","onClick","label","Typography","variant","gutterBottom","React","Component","WebCryptoEncryption","handleRootRSAOAEPKeyChange","handleExportKeys","handleImportKeys","handleEncryptMessage","handleMessageToEncryptChange","handleDecryptMessage","state","jwkPublicKey","jwkPrivateKey","isRootRSAOAEPKeySet","importedPublicKey","importedPrivateKey","encryptedMessage","messageToEncrypt","decryptedMessage","setState","message","component","Divider","Link","href","components_RootRSAOAEPKey","toString","components_ExportKeys","onExportKeys","rootKey","isRootKeySet","components_ImportKeys","onImportKeys","components_EncryptMessage","onEncryptMessage","onMessageToEncryptChange","components_DecryptMessage","onDecryptMessage","exportKey","keyData","_callee2","_context2","_callee3","_context3","ExportKeys","_x2","_exportjwkPublicKey","exportjwkPublicKey","_x3","_exportjwkPrivateKey","exportjwkPrivateKey","disabled","rows","cols","readOnly","value","JSON","stringify","importKey","ImportKeys","_x","_importPublicFromJwk","importPublicFromJwk","_importPrivateFromJwk","importPrivateFromJwk","encodedMessage","encrypt","EncryptMessage","handleMessageChange","_encryptMessage","encryptMessage","TextEncoder","encode","target","onChange","buf","Array","prototype","map","x","slice","join","ciphertext","decrypt","DecryptMessage","_decryptMessage","decryptMessage","TextDecoder","decode","App","Container","maxWidth","components_WebCryptoEncryption","Boolean","location","hostname","match","ReactDOM","render","MuiThemeProvider_default","muiTheme","getMuiTheme","darkBaseTheme","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b9c1d03.chunk.js","sourcesContent":["// Generate our root Public Key for all encryption from now on\nexport async function generateKey () {\n  return window.crypto.subtle.generateKey({\n    name: 'RSA-OAEP',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  },\n  true,\n  ['encrypt', 'decrypt']\n  )\n}\n","import React from 'react'\nimport { generateKey } from '../lib/rootRSAOAEPKey'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass RootRSAOAEPKey extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    generateKey()\n      .then((key) => {\n        console.log('### RootRSAOAEPKey ###')\n        console.log('key.publicKey', key.publicKey)\n        console.log('key.privateKey', key.privateKey)\n\n        this.props.onGenerateKey(key)\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            onClick={this.handleChange}\n            label='Generate Root RSA-OAEPKey'\n          />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>\n            Open your console to see the generated root CryptoKey\n          </Typography>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default RootRSAOAEPKey\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport {\n  RootRSAOAEPKey,\n  ExportKeys,\n  ImportKeys,\n  EncryptMessage,\n  DecryptMessage\n} from './index'\nimport { Link } from '@material-ui/core';\n\nclass WebCryptoEncryption extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleRootRSAOAEPKeyChange = this.handleRootRSAOAEPKeyChange.bind(this)\n    this.handleExportKeys = this.handleExportKeys.bind(this)\n    this.handleImportKeys = this.handleImportKeys.bind(this)\n    this.handleEncryptMessage = this.handleEncryptMessage.bind(this)\n    this.handleMessageToEncryptChange = this.handleMessageToEncryptChange.bind(this)\n    this.handleDecryptMessage = this.handleDecryptMessage.bind(this)\n    this.state = {\n      RootRSAOAEPKey: {},\n      jwkPublicKey: '',\n      jwkPrivateKey: '',\n      isRootRSAOAEPKeySet: false,\n      importedPublicKey: '',\n      importedPrivateKey: '',\n      encryptedMessage: '',\n      messageToEncrypt: 'Hello World! 12345',\n      decryptedMessage: ''\n    }\n  }\n\n  handleRootRSAOAEPKeyChange (key) {\n    this.setState({\n      RootRSAOAEPKey: key,\n      isRootRSAOAEPKeySet: true\n    })\n  }\n\n  handleExportKeys (jwkPublicKey, jwkPrivateKey) {\n    this.setState({\n      jwkPublicKey: jwkPublicKey,\n      jwkPrivateKey: jwkPrivateKey\n    })\n  }\n\n  handleImportKeys (importedPublicKey, importedPrivateKey) {\n    this.setState({\n      importedPublicKey: importedPublicKey,\n      importedPrivateKey: importedPrivateKey\n    })\n  }\n\n  handleEncryptMessage (encryptedMessage) {\n    this.setState({\n      encryptedMessage: encryptedMessage\n    })\n  }\n\n  handleMessageToEncryptChange (message) {\n    this.setState({\n      messageToEncrypt: message\n    })\n  }\n\n  handleDecryptMessage (decryptedMessage) {\n    this.setState({\n      decryptedMessage: decryptedMessage\n    })\n  }\n\n  render () {\n    return (\n      <>\n        <section>\n          <Typography component='p' gutterBottom>\n            Hello and welcome! My aim here is to try and give a clear example of how we can use WebCrypto in a simple\n            use case and hopefully give you an idea of how you can use it, test it and implement it into your own projects.\n          </Typography>\n          <Typography component='p' gutterBottom>\n            I will try and give an example User Story that will give us an overview of what we need to achieve and then step\n            by step how we achieve this.\n          </Typography>\n          <Typography component='p' gutterBottom>\n            Each step will include a link to the react component, encryption library component needed and a explanation of what\n            each is doing.\n          </Typography>\n        </section>\n        <section>\n          <Typography variant='h3' component='h3' gutterBottom>\n              User Stories\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <ol>\n              <li>A user should be able to generate a new, unique encryption key</li>\n              <li>They will be able to export the private and public keys in a format that can be saved</li>\n              <li>They will be able to re-import these keys to use</li>\n              <li>They will be able to encrypt a message using their public key</li>\n              <li>They will be able to decrypt their message using their private key</li>\n            </ol>\n          </Typography>\n          <Divider variant='middle' />\n        </section>\n        <section>\n          <Typography variant='h2' component='h2' gutterBottom>Step 1: Root Certificate (PBK)</Typography>\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> A user should be able to generate a new, unique encryption key\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/RootRSAOAEPKey.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/RootRSAOAEPKey.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Typography component='p' gutterBottom>\n          </Typography>\n          <RootRSAOAEPKey\n            onGenerateKey={this.handleRootRSAOAEPKeyChange}\n          />\n          <Typography variant='body1' gutterBottom>Root Key Set: {this.state.isRootRSAOAEPKeySet.toString()}</Typography>\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 2: Export Keys</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to export the private and public keys in a format that can be saved\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/ExportKeys.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/exportKeys.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Typography component='p' gutterBottom>\n          </Typography>\n\n          <ExportKeys\n            onExportKeys={this.handleExportKeys}\n            rootKey={this.state.RootRSAOAEPKey}\n            jwkPublicKey={this.state.jwkPublicKey}\n            jwkPrivateKey={this.state.jwkPrivateKey}\n            isRootKeySet={this.state.isRootRSAOAEPKeySet}\n          />\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 3: Import Key</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to re-import these keys to use\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/ImportKeys.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/importKeys.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Typography component='p' gutterBottom>\n          </Typography>\n\n          <ImportKeys\n            onImportKeys={this.handleImportKeys}\n            jwkPublicKey={this.state.jwkPublicKey}\n            jwkPrivateKey={this.state.jwkPrivateKey}\n            importedPublicKey={this.state.importedPublicKey}\n            importedPrivateKey={this.state.importedPrivateKey}\n          />\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 4: SHA Encrypt Object</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to encrypt a message using their public key\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/EncryptMessage.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/encryptMessage.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Typography component='p' gutterBottom>\n          </Typography>\n\n          <EncryptMessage\n            onEncryptMessage={this.handleEncryptMessage}\n            onMessageToEncryptChange={this.handleMessageToEncryptChange}\n            importedPublicKey={this.state.importedPublicKey}\n            messageToEncrypt={this.state.messageToEncrypt}\n            encryptedMessage={this.state.encryptedMessage}\n          />\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 5: SHA Decrypt</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to decrypt their message using their private key\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/DecryptMessage.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/decryptMessage.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Typography component='p' gutterBottom>\n          </Typography>\n\n          <DecryptMessage\n            onDecryptMessage={this.handleDecryptMessage}\n            importedPrivateKey={this.state.importedPrivateKey}\n            encryptedMessage={this.state.encryptedMessage}\n            decryptedMessage={this.state.decryptedMessage}\n          />\n        </section>\n      </>\n    )\n  }\n}\n\nexport default WebCryptoEncryption\n","async function exportKey (keyData) {\n  return window.crypto.subtle.exportKey('jwk', keyData)\n    .then((key) => {\n      return (key)\n    })\n}\n\nexport async function exportjwkPublicKey (key) {\n  return exportKey(key.publicKey)\n}\n\nexport async function exportjwkPrivateKey (key) {\n  return exportKey(key.privateKey)\n}\n","import React from 'react'\nimport { exportjwkPrivateKey, exportjwkPublicKey } from '../lib/exportKeys'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass ExportKeys extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const key = this.props.rootKey\n\n    exportjwkPublicKey(key)\n      .then((jwkPublicKey) => {\n        exportjwkPrivateKey(key)\n          .then((jwkPrivateKey) => {\n            this.props.onExportKeys(\n              jwkPublicKey,\n              jwkPrivateKey\n            )\n          })\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            disabled={!this.props.isRootKeySet}\n            onClick={this.handleChange}\n            label='Export Root RSA-OAEPKeys' />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Exported JWK Public Key</Typography>\n          <textarea rows='6' cols='100' readOnly value={JSON.stringify(this.props.jwkPublicKey)} />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Exported JWK Private Key</Typography>\n          <textarea rows='6' cols='100' readOnly value={JSON.stringify(this.props.jwkPrivateKey)} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default ExportKeys\n","export async function importPublicFromJwk (keyData) {\n  return window.crypto.subtle.importKey(\n    'jwk',\n    keyData,\n    {\n      name: 'RSA-OAEP',\n      hash: 'SHA-256'\n    },\n    true,\n    ['encrypt']\n  )\n}\n\nexport async function importPrivateFromJwk (keyData) {\n  return window.crypto.subtle.importKey(\n    'jwk',\n    keyData,\n    {\n      name: 'RSA-OAEP',\n      hash: 'SHA-256'\n    },\n    true,\n    ['decrypt']\n  )\n}\n","import React from 'react'\nimport { importPrivateFromJwk, importPublicFromJwk } from '../lib/importKeys'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass ImportKeys extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const jwkPublicKey = this.props.jwkPublicKey\n    const jwkPrivateKey = this.props.jwkPrivateKey\n\n    importPublicFromJwk(jwkPublicKey)\n      .then((importedPublicKey) => {\n        importPrivateFromJwk(jwkPrivateKey)\n          .then((importedPrivateKey) => {\n            console.log('### Imported Keys ###')\n            console.log('importedPublicKey', importedPublicKey)\n            console.log('importedPrivateKey', importedPrivateKey)\n            this.props.onImportKeys(\n              importedPublicKey,\n              importedPrivateKey\n            )\n          })\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            onClick={this.handleChange}\n            label={'Import Public and Private Key (Check console for CryptoKey)'}\n            disabled={(this.props.jwkPublicKey === '')}\n          />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Imported Public Key: {(this.props.importedPublicKey !== '').toString()}</Typography>\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Imported Private Key: {(this.props.importedPrivateKey !== '').toString()}</Typography>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default ImportKeys\n","export async function encryptMessage (publicKey, encodedMessage) {\n  return window.crypto.subtle.encrypt(\n    {\n      name: 'RSA-OAEP'\n    },\n    publicKey,\n    encodedMessage\n  )\n}\n","import React from 'react'\nimport { encryptMessage } from '../lib/encryptMessage'\nimport { buf2hex } from '../lib/utils'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass EncryptMessage extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleMessageChange = this.handleMessageChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const publicKey = this.props.importedPublicKey\n    let message = new TextEncoder().encode(this.props.messageToEncrypt)\n\n    encryptMessage(publicKey, message)\n      .then((encryptedMessage) => {\n        this.props.onEncryptMessage(\n          encryptedMessage\n        )\n      })\n  }\n\n  handleMessageChange (event) {\n    this.props.onMessageToEncryptChange(\n      event.target.value\n    )\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            disabled={this.props.importedPublicKey === ''}\n            onClick={this.handleChange}\n            label='Encrypt Message' />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Message to Encrypt</Typography>\n          <textarea rows='6' cols='100' value={this.props.messageToEncrypt} onChange={this.handleMessageChange} />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Encrypted Message (ArrayBuffer to Hex for demo)</Typography>\n          <textarea rows='6' cols='100' readOnly value={buf2hex(this.props.encryptedMessage)} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default EncryptMessage\n","export function convertStringToArrayBufferView (str) {\n  var bytes = new Uint8Array(str.length)\n  for (var iii = 0; iii < str.length; iii++) {\n    bytes[iii] = str.charCodeAt(iii)\n  }\n\n  return bytes\n}\n\nexport function convertArrayBufferToHexaDecimal (buffer) {\n  var dataView = new DataView(buffer)\n  var iii; var len; var hex = ''; var c\n\n  for (iii = 0, len = dataView.byteLength; iii < len; iii += 1) {\n    c = dataView.getUint8(iii).toString(16)\n    if (c.length < 2) {\n      c = '0' + c\n    }\n\n    hex += c\n  }\n\n  return hex\n}\n\nexport function buf2hex (buf) {\n  return Array.prototype.map.call(new Uint8Array(buf), x => (('00' + x.toString(16)).slice(-2))).join('')\n}\n\nexport function hexToArrayBuffer (hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('Expected input to be a string')\n  }\n\n  if ((hex.length % 2) !== 0) {\n    throw new RangeError('Expected string to be an even number of characters')\n  }\n\n  var view = new Uint8Array(hex.length / 2)\n\n  for (var i = 0; i < hex.length; i += 2) {\n    view[i / 2] = parseInt(hex.substring(i, i + 2), 16)\n  }\n\n  return view.buffer\n}\n","export async function decryptMessage (publicKey, ciphertext) {\n  return window.crypto.subtle.decrypt(\n    {\n      name: 'RSA-OAEP'\n    },\n    publicKey,\n    ciphertext\n  )\n}\n","import React from 'react'\nimport { decryptMessage } from '../lib/decryptMessage'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\nclass DecryptMessage extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const privateKey = this.props.importedPrivateKey\n    const encryptedMessage = this.props.encryptedMessage\n\n    decryptMessage(privateKey, encryptedMessage)\n      .then((decryptedMessage) => {\n        this.props.onDecryptMessage(\n          new TextDecoder().decode(decryptedMessage)\n        )\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            disabled={this.props.importedPrivateKey === '' || this.props.encryptedMessage === ''}\n            onClick={this.handleChange}\n            label='Decrypt Message' />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Decrypted Message</Typography>\n          <textarea rows='6' cols='100' readOnly value={this.props.decryptedMessage} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default DecryptMessage\n","import React, { Component } from 'react'\nimport './App.css'\nimport { WebCryptoEncryption } from './components/index'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nclass App extends Component {\n  render () {\n    return (\n      <Container maxWidth='sm'>\n        <Typography variant='h1' component='h1' gutterBottom>\n          Test WebCrypto\n        </Typography>\n        <WebCryptoEncryption />\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport darkBaseTheme from 'material-ui/styles/baseThemes/darkBaseTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst StyledApp = () => (\n  <MuiThemeProvider muiTheme={getMuiTheme(darkBaseTheme)}>\n    <App />\n  </MuiThemeProvider>\n)\n\nReactDOM.render(<StyledApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}