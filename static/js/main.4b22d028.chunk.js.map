{"version":3,"sources":["lib/rootRSAOAEPKey.js","components/RootRSAOAEPKey.js","components/WebCryptoEncryption.js","lib/exportKeys.js","components/ExportKeys.js","lib/importKeys.js","components/ImportKeys.js","lib/encryptMessage.js","components/EncryptMessage.js","lib/utils.js","lib/decryptMessage.js","components/DecryptMessage.js","App.js","serviceWorker.js","index.js"],"names":["window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","RootRSAOAEPKey","props","handleChange","bind","event","preventDefault","then","key","console","log","publicKey","privateKey","onGenerateKey","onClick","this","label","Typography","variant","gutterBottom","React","Component","WebCryptoEncryption","handleRootRSAOAEPKeyChange","handleExportKeys","handleImportKeys","handleEncryptMessage","handleMessageToEncryptChange","handleDecryptMessage","state","jwkPublicKey","jwkPrivateKey","isRootRSAOAEPKeySet","importedPublicKey","importedPrivateKey","encryptedMessage","messageToEncrypt","decryptedMessage","setState","message","component","Divider","Link","href","language","toString","onExportKeys","rootKey","isRootKeySet","onImportKeys","onEncryptMessage","onMessageToEncryptChange","onDecryptMessage","exportKey","keyData","ExportKeys","exportjwkPublicKey","exportjwkPrivateKey","disabled","rows","cols","readOnly","value","JSON","stringify","importKey","ImportKeys","importPublicFromJwk","importPrivateFromJwk","encodedMessage","encrypt","EncryptMessage","handleMessageChange","encryptMessage","TextEncoder","encode","target","onChange","buf","Array","prototype","map","call","x","slice","join","ciphertext","decrypt","DecryptMessage","decryptMessage","TextDecoder","decode","App","Container","maxWidth","Boolean","location","hostname","match","StyledApp","muiTheme","getMuiTheme","darkBaseTheme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b22d028.chunk.js","sourcesContent":["// Generate our root Public Key for all encryption from now on\nexport async function generateKey () {\n  return window.crypto.subtle.generateKey({\n    name: 'RSA-OAEP',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  },\n  true,\n  ['encrypt', 'decrypt']\n  )\n}\n","import React from 'react'\nimport { generateKey } from '../lib/rootRSAOAEPKey'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass RootRSAOAEPKey extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    generateKey()\n      .then((key) => {\n        console.log('### RootRSAOAEPKey ###')\n        console.log('key.publicKey', key.publicKey)\n        console.log('key.privateKey', key.privateKey)\n\n        this.props.onGenerateKey(key)\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            onClick={this.handleChange}\n            label='Generate Root RSA-OAEPKey'\n          />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>\n            Open your console to see the generated root CryptoKey\n          </Typography>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default RootRSAOAEPKey\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport Highlight from 'react-highlight'\nimport {\n  RootRSAOAEPKey,\n  ExportKeys,\n  ImportKeys,\n  EncryptMessage,\n  DecryptMessage\n} from './index'\nimport { Link } from '@material-ui/core'\n\nclass WebCryptoEncryption extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleRootRSAOAEPKeyChange = this.handleRootRSAOAEPKeyChange.bind(this)\n    this.handleExportKeys = this.handleExportKeys.bind(this)\n    this.handleImportKeys = this.handleImportKeys.bind(this)\n    this.handleEncryptMessage = this.handleEncryptMessage.bind(this)\n    this.handleMessageToEncryptChange = this.handleMessageToEncryptChange.bind(this)\n    this.handleDecryptMessage = this.handleDecryptMessage.bind(this)\n    this.state = {\n      RootRSAOAEPKey: {},\n      jwkPublicKey: '',\n      jwkPrivateKey: '',\n      isRootRSAOAEPKeySet: false,\n      importedPublicKey: '',\n      importedPrivateKey: '',\n      encryptedMessage: '',\n      messageToEncrypt: 'Hello World! 12345',\n      decryptedMessage: ''\n    }\n  }\n\n  handleRootRSAOAEPKeyChange (key) {\n    this.setState({\n      RootRSAOAEPKey: key,\n      isRootRSAOAEPKeySet: true\n    })\n  }\n\n  handleExportKeys (jwkPublicKey, jwkPrivateKey) {\n    this.setState({\n      jwkPublicKey: jwkPublicKey,\n      jwkPrivateKey: jwkPrivateKey\n    })\n  }\n\n  handleImportKeys (importedPublicKey, importedPrivateKey) {\n    this.setState({\n      importedPublicKey: importedPublicKey,\n      importedPrivateKey: importedPrivateKey\n    })\n  }\n\n  handleEncryptMessage (encryptedMessage) {\n    this.setState({\n      encryptedMessage: encryptedMessage\n    })\n  }\n\n  handleMessageToEncryptChange (message) {\n    this.setState({\n      messageToEncrypt: message\n    })\n  }\n\n  handleDecryptMessage (decryptedMessage) {\n    this.setState({\n      decryptedMessage: decryptedMessage\n    })\n  }\n\n  render () {\n    return (\n      <>\n        <section>\n          <Typography component='p' gutterBottom>\n            Hello and welcome! My aim here is to try and give a clear example of how we can use WebCrypto in a simple\n            use case and hopefully give you an idea of how you can use it, test it and implement it into your own projects.\n          </Typography>\n          <Typography component='p' gutterBottom>\n            I will try and give an example User Story that will give us an overview of what we need to achieve and then step\n            by step how we achieve this.\n          </Typography>\n          <Typography component='p' gutterBottom>\n            Each step will include a link to the react component, encryption library component needed and a code example\n          </Typography>\n          <Typography component='p' gutterBottom>\n            All the following methods are wrapped in tests. I would highly recommend reading through the test cases\n            as they can be a great insight on how the code fits together.\n          </Typography>\n        </section>\n        <section>\n          <Typography variant='h3' component='h3' gutterBottom>\n              User Stories\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <ol>\n              <li>A user should be able to generate a new, unique encryption key</li>\n              <li>They will be able to export the private and public keys in a format that can be saved</li>\n              <li>They will be able to re-import these keys to use</li>\n              <li>They will be able to encrypt a message using their public key</li>\n              <li>They will be able to decrypt their message using their private key</li>\n            </ol>\n          </Typography>\n          <Divider variant='middle' />\n        </section>\n        <section>\n          <Typography variant='h2' component='h2' gutterBottom>Step 1: Root Certificate (RSA-OAEP)</Typography>\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> A user should be able to generate a new, unique encryption key\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/RootRSAOAEPKey.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/RootRSAOAEPKey.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Highlight language='javascript'>\n            {`\n  export async function generateKey () {\n    return window.crypto.subtle.generateKey({\n      name: 'RSA-OAEP',\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: {\n        name: 'SHA-256'\n      }\n    },\n    true,\n    ['encrypt', 'decrypt']\n    )\n  }\n            `}\n          </Highlight>\n          <RootRSAOAEPKey\n            onGenerateKey={this.handleRootRSAOAEPKeyChange}\n          />\n          <Typography variant='body1' gutterBottom>Root Key Set: {this.state.isRootRSAOAEPKeySet.toString()}</Typography>\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 2: Export Keys</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to export the private and public keys in a format that can be saved\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/ExportKeys.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/exportKeys.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Highlight language='javascript'>\n            {`\n  async function exportKey (keyData) {\n    return window.crypto.subtle.exportKey('jwk', keyData)\n      .then((key) => {\n        return (key)\n      })\n  }\n  \n  export async function exportjwkPublicKey (key) {\n    return exportKey(key.publicKey)\n  }\n  \n  export async function exportjwkPrivateKey (key) {\n    return exportKey(key.privateKey)\n  }  \n            `}\n          </Highlight>\n\n          <ExportKeys\n            onExportKeys={this.handleExportKeys}\n            rootKey={this.state.RootRSAOAEPKey}\n            jwkPublicKey={this.state.jwkPublicKey}\n            jwkPrivateKey={this.state.jwkPrivateKey}\n            isRootKeySet={this.state.isRootRSAOAEPKeySet}\n          />\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 3: Import Key</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to re-import these keys to use\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/ImportKeys.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/importKeys.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography><Highlight language='javascript'>\n            {`\n  export async function importPublicFromJwk (keyData) {\n    return window.crypto.subtle.importKey(\n      'jwk',\n      keyData,\n      {\n        name: 'RSA-OAEP',\n        hash: 'SHA-256'\n      },\n      true,\n      ['encrypt']\n    )\n  }\n  \n  export async function importPrivateFromJwk (keyData) {\n    return window.crypto.subtle.importKey(\n      'jwk',\n      keyData,\n      {\n        name: 'RSA-OAEP',\n        hash: 'SHA-256'\n      },\n      true,\n      ['decrypt']\n    )\n  }  \n            `}\n          </Highlight>\n\n          <ImportKeys\n            onImportKeys={this.handleImportKeys}\n            jwkPublicKey={this.state.jwkPublicKey}\n            jwkPrivateKey={this.state.jwkPrivateKey}\n            importedPublicKey={this.state.importedPublicKey}\n            importedPrivateKey={this.state.importedPrivateKey}\n          />\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 4: SHA Encrypt Object</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to encrypt a message using their public key\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/EncryptMessage.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/encryptMessage.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Highlight language='javascript'>\n            {`\n  export async function encryptMessage (publicKey, encodedMessage) {\n    return window.crypto.subtle.encrypt(\n      {\n        name: 'RSA-OAEP'\n      },\n      publicKey,\n      encodedMessage\n    )\n  }  \n            `}\n          </Highlight>\n\n          <EncryptMessage\n            onEncryptMessage={this.handleEncryptMessage}\n            onMessageToEncryptChange={this.handleMessageToEncryptChange}\n            importedPublicKey={this.state.importedPublicKey}\n            messageToEncrypt={this.state.messageToEncrypt}\n            encryptedMessage={this.state.encryptedMessage}\n          />\n        </section>\n        <section>\n          <Divider variant='middle' />\n          <Typography variant='h2' component='h2' gutterBottom>Step 5: SHA Decrypt</Typography>\n\n          <Typography component='p' gutterBottom>\n            <strong>User Story:</strong> They will be able to decrypt their message using their private key\n          </Typography>\n          <Typography component='p' gutterBottom>\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/components/DecryptMessage.js'>\n              <strong>Code: </strong>React Component\n            </Link>\n            <br />\n            <Link href='https://github.com/johnnolan/react-jest-webcrypto/blob/master/src/lib/decryptMessage.js'>\n              <strong>Code: </strong>Lib\n            </Link>\n          </Typography>\n          <Highlight language='javascript'>\n            {`\n  export async function decryptMessage (publicKey, ciphertext) {\n    return window.crypto.subtle.decrypt(\n      {\n        name: 'RSA-OAEP'\n      },\n      publicKey,\n      ciphertext\n    )\n  }  \n            `}\n          </Highlight>\n\n          <DecryptMessage\n            onDecryptMessage={this.handleDecryptMessage}\n            importedPrivateKey={this.state.importedPrivateKey}\n            encryptedMessage={this.state.encryptedMessage}\n            decryptedMessage={this.state.decryptedMessage}\n          />\n        </section>\n      </>\n    )\n  }\n}\n\nexport default WebCryptoEncryption\n","async function exportKey (keyData) {\n  return window.crypto.subtle.exportKey('jwk', keyData)\n    .then((key) => {\n      return (key)\n    })\n}\n\nexport async function exportjwkPublicKey (key) {\n  return exportKey(key.publicKey)\n}\n\nexport async function exportjwkPrivateKey (key) {\n  return exportKey(key.privateKey)\n}\n","import React from 'react'\nimport { exportjwkPrivateKey, exportjwkPublicKey } from '../lib/exportKeys'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass ExportKeys extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const key = this.props.rootKey\n\n    exportjwkPublicKey(key)\n      .then((jwkPublicKey) => {\n        exportjwkPrivateKey(key)\n          .then((jwkPrivateKey) => {\n            this.props.onExportKeys(\n              jwkPublicKey,\n              jwkPrivateKey\n            )\n          })\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            disabled={!this.props.isRootKeySet}\n            onClick={this.handleChange}\n            label='Export Root RSA-OAEPKeys' />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Exported JWK Public Key</Typography>\n          <textarea rows='6' cols='100' readOnly value={JSON.stringify(this.props.jwkPublicKey)} />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Exported JWK Private Key</Typography>\n          <textarea rows='6' cols='100' readOnly value={JSON.stringify(this.props.jwkPrivateKey)} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default ExportKeys\n","export async function importPublicFromJwk (keyData) {\n  return window.crypto.subtle.importKey(\n    'jwk',\n    keyData,\n    {\n      name: 'RSA-OAEP',\n      hash: 'SHA-256'\n    },\n    true,\n    ['encrypt']\n  )\n}\n\nexport async function importPrivateFromJwk (keyData) {\n  return window.crypto.subtle.importKey(\n    'jwk',\n    keyData,\n    {\n      name: 'RSA-OAEP',\n      hash: 'SHA-256'\n    },\n    true,\n    ['decrypt']\n  )\n}\n","import React from 'react'\nimport { importPrivateFromJwk, importPublicFromJwk } from '../lib/importKeys'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass ImportKeys extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const jwkPublicKey = this.props.jwkPublicKey\n    const jwkPrivateKey = this.props.jwkPrivateKey\n\n    importPublicFromJwk(jwkPublicKey)\n      .then((importedPublicKey) => {\n        importPrivateFromJwk(jwkPrivateKey)\n          .then((importedPrivateKey) => {\n            console.log('### Imported Keys ###')\n            console.log('importedPublicKey', importedPublicKey)\n            console.log('importedPrivateKey', importedPrivateKey)\n            this.props.onImportKeys(\n              importedPublicKey,\n              importedPrivateKey\n            )\n          })\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            onClick={this.handleChange}\n            label={'Import Public and Private Key (Check console for CryptoKey)'}\n            disabled={(this.props.jwkPublicKey === '')}\n          />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Imported Public Key: {(this.props.importedPublicKey !== '').toString()}</Typography>\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Imported Private Key: {(this.props.importedPrivateKey !== '').toString()}</Typography>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default ImportKeys\n","export async function encryptMessage (publicKey, encodedMessage) {\n  return window.crypto.subtle.encrypt(\n    {\n      name: 'RSA-OAEP'\n    },\n    publicKey,\n    encodedMessage\n  )\n}\n","import React from 'react'\nimport { encryptMessage } from '../lib/encryptMessage'\nimport { buf2hex } from '../lib/utils'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass EncryptMessage extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleMessageChange = this.handleMessageChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const publicKey = this.props.importedPublicKey\n    let message = new TextEncoder().encode(this.props.messageToEncrypt)\n\n    encryptMessage(publicKey, message)\n      .then((encryptedMessage) => {\n        this.props.onEncryptMessage(\n          encryptedMessage\n        )\n      })\n  }\n\n  handleMessageChange (event) {\n    this.props.onMessageToEncryptChange(\n      event.target.value\n    )\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            disabled={this.props.importedPublicKey === ''}\n            onClick={this.handleChange}\n            label='Encrypt Message' />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Message to Encrypt</Typography>\n          <textarea rows='6' cols='100' value={this.props.messageToEncrypt} onChange={this.handleMessageChange} />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Encrypted Message (ArrayBuffer to Hex for demo)</Typography>\n          <textarea rows='6' cols='100' readOnly value={buf2hex(this.props.encryptedMessage)} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default EncryptMessage\n","export function convertStringToArrayBufferView (str) {\n  var bytes = new Uint8Array(str.length)\n  for (var iii = 0; iii < str.length; iii++) {\n    bytes[iii] = str.charCodeAt(iii)\n  }\n\n  return bytes\n}\n\nexport function convertArrayBufferToHexaDecimal (buffer) {\n  var dataView = new DataView(buffer)\n  var iii; var len; var hex = ''; var c\n\n  for (iii = 0, len = dataView.byteLength; iii < len; iii += 1) {\n    c = dataView.getUint8(iii).toString(16)\n    if (c.length < 2) {\n      c = '0' + c\n    }\n\n    hex += c\n  }\n\n  return hex\n}\n\nexport function buf2hex (buf) {\n  return Array.prototype.map.call(new Uint8Array(buf), x => (('00' + x.toString(16)).slice(-2))).join('')\n}\n\nexport function hexToArrayBuffer (hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('Expected input to be a string')\n  }\n\n  if ((hex.length % 2) !== 0) {\n    throw new RangeError('Expected string to be an even number of characters')\n  }\n\n  var view = new Uint8Array(hex.length / 2)\n\n  for (var i = 0; i < hex.length; i += 2) {\n    view[i / 2] = parseInt(hex.substring(i, i + 2), 16)\n  }\n\n  return view.buffer\n}\n","export async function decryptMessage (publicKey, ciphertext) {\n  return window.crypto.subtle.decrypt(\n    {\n      name: 'RSA-OAEP'\n    },\n    publicKey,\n    ciphertext\n  )\n}\n","import React from 'react'\nimport { decryptMessage } from '../lib/decryptMessage'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Typography from '@material-ui/core/Typography'\n\nclass DecryptMessage extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (event) {\n    event.preventDefault()\n    const privateKey = this.props.importedPrivateKey\n    const encryptedMessage = this.props.encryptedMessage\n\n    decryptMessage(privateKey, encryptedMessage)\n      .then((decryptedMessage) => {\n        this.props.onDecryptMessage(\n          new TextDecoder().decode(decryptedMessage)\n        )\n      })\n  }\n\n  render () {\n    return (\n      <>\n        <div>\n          <RaisedButton\n            disabled={this.props.importedPrivateKey === '' || this.props.encryptedMessage === ''}\n            onClick={this.handleChange}\n            label='Decrypt Message' />\n        </div>\n        <div>\n          <Typography variant='body1' gutterBottom>Decrypted Message</Typography>\n          <textarea rows='6' cols='100' readOnly value={this.props.decryptedMessage} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default DecryptMessage\n","import React, { Component } from 'react'\nimport './App.css'\nimport './a11y-dark.css'\nimport { WebCryptoEncryption } from './components/index'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nclass App extends Component {\n  render () {\n    return (\n      <Container maxWidth='sm'>\n        <Typography variant='h1' component='h1' gutterBottom>\n          Test WebCrypto\n        </Typography>\n        <WebCryptoEncryption />\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport darkBaseTheme from 'material-ui/styles/baseThemes/darkBaseTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst StyledApp = () => (\n  <MuiThemeProvider muiTheme={getMuiTheme(darkBaseTheme)}>\n    <App />\n  </MuiThemeProvider>\n)\n\nReactDOM.render(<StyledApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}